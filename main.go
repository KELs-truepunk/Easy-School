package main

import (
	"fmt"
	"os"
	"sync"

	MQTT "github.com/eclipse/paho.mqtt.golang"
	"github.com/mymmrac/telego"
	th "github.com/mymmrac/telego/telegohandler"
	tu "github.com/mymmrac/telego/telegoutil"
)

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
type Config struct {
	MQTTBroker   string
	MQTTUsername string
	MQTTPassword string
	BotToken     string
}

// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–±–∏–Ω–µ—Ç–µ
type Room struct {
	ID      int
	Name    string
	Command string
	Topic   string
	Message string
}

var (
	config = Config{
		MQTTBroker:   "",
		MQTTUsername: "",
		MQTTPassword: "",
		BotToken:     "",
	}

	// –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–±–∏–Ω–µ—Ç–æ–≤
	rooms = []Room{
		{
			ID:      32,
			Name:    "–ö–∞–±–∏–Ω–µ—Ç ‚Ññ32",
			Command: "open_lock32",
			Topic:   "new/button",
			Message: "32",
		},
		{
			ID:      33,
			Name:    "–ö–∞–±–∏–Ω–µ—Ç ‚Ññ33",
			Command: "open_lock33",
			Topic:   "new/button",
			Message: "33",
		},
		{
			ID:      45,
			Name:    "–ö–∞–±–∏–Ω–µ—Ç ‚Ññ45",
			Command: "open_lock45",
			Topic:   "new/button",
			Message: "45",
		},
	}

	mqttClient MQTT.Client
	clientOnce sync.Once
)

// getMQTTClient –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç singleton –∫–ª–∏–µ–Ω—Ç–∞ MQTT
func getMQTTClient() (MQTT.Client, error) {
	var err error
	clientOnce.Do(func() {
		opts := MQTT.NewClientOptions().AddBroker(config.MQTTBroker)
		opts.SetUsername(config.MQTTUsername)
		opts.SetPassword(config.MQTTPassword)
		opts.SetClientID("go_mqtt_telegram_bot")

		client := MQTT.NewClient(opts)
		if token := client.Connect(); token.Wait() && token.Error() != nil {
			err = token.Error()
			return
		}
		mqttClient = client
	})

	return mqttClient, err
}

// –ø—É–±–ª–∏–∫–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ MQTT
func publishMQTTMessage(topic, message string) error {
	client, err := getMQTTClient()
	if err != nil {
		return fmt.Errorf("MQTT connection failed: %w", err)
	}

	token := client.Publish(topic, 0, false, message)
	token.Wait()
	if token.Error() != nil {
		return fmt.Errorf("MQTT publish failed: %w", token.Error())
	}

	return nil
}

func createKeyboard() *telego.ReplyKeyboardMarkup {
	// –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫ –≤ —Å—Ç—Ä–æ–∫–µ(–º–æ–∂–µ—Ç –∏–∑–º–µ–Ω—è—Ç—å—Å—è –ø–æ –º–µ—Ä–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–≤–µ—Ä–µ–π)
	buttonsPerRow := 2

	// –°–æ–∑–¥–∞–µ–º —Å–ª–∞–π—Å –¥–ª—è –≤—Å–µ—Ö —Å—Ç—Ä–æ–∫
	rows := make([][]telego.KeyboardButton, 0)

	// –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É
	currentRow := make([]telego.KeyboardButton, 0, buttonsPerRow)

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–±–∏–Ω–µ—Ç–æ–≤
	for _, room := range rooms {
		// –ó–¥–µ—Å—è –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–±–∏–Ω–µ—Ç–∞ –≤–º–µ—Å—Ç–æ –∫–æ–º–∞–Ω–¥—ã
		btn := tu.KeyboardButton(room.Name)
		currentRow = append(currentRow, btn)

		// –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞, —Ç–æ –¥–µ–ª–∞–µ–º –Ω–æ–≤—É—é
		if len(currentRow) >= buttonsPerRow {
			rows = append(rows, currentRow)
			currentRow = make([]telego.KeyboardButton, 0, buttonsPerRow)
		}
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–Ω–æ–ø–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
	if len(currentRow) > 0 {
		rows = append(rows, currentRow)
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–º–æ—â–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é —Å—Ç—Ä–æ–∫—É
	rows = append(rows, tu.KeyboardRow(
		tu.KeyboardButton("–û –±–æ—Ç–µ"),
	))

	return tu.Keyboard(rows...).
		WithResizeKeyboard(). // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞
		WithOneTimeKeyboard() // –°–∫—Ä—ã—Ç–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
}

func main() {
	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
	bot, err := telego.NewBot(config.BotToken, telego.WithDefaultDebugLogger())
	if err != nil {
		fmt.Printf("Failed to create bot: %v\n", err)
		os.Exit(1)
	}

	// –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
	updates, err := bot.UpdatesViaLongPolling(nil)
	if err != nil {
		fmt.Printf("Failed to get updates: %v\n", err)
		os.Exit(1)
	}

	// –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
	bh, err := th.NewBotHandler(bot, updates)
	if err != nil {
		fmt.Printf("Failed to create bot handler: %v\n", err)
		os.Exit(1)
	}

	defer func() {
		bh.Stop()
		bot.StopLongPolling()
		if mqttClient != nil && mqttClient.IsConnected() {
			mqttClient.Disconnect(250)
		}
	}()

	keyboard := createKeyboard()

	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
	bh.Handle(func(bot *telego.Bot, update telego.Update) {
		chatID := tu.ID(update.Message.Chat.ID)
		message := tu.Message(
			chatID,
			"üö™ MQTT-–ø–∞–Ω–µ–ª—å –¥–ª—è –°–∏—Å—Ç–µ–º—ã –∫–æ–Ω—Ç—Ä–æ–ª—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–æ–º\n\n"+
				"–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–±–∏–Ω–µ—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å:",
		).WithReplyMarkup(keyboard)
		_, _ = bot.SendMessage(message)
	}, th.CommandEqual("start"))

	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫–∏ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –∫–∞–±–∏–Ω–µ—Ç–æ–≤)
	bh.Handle(func(bot *telego.Bot, update telego.Update) {
		text := update.Message.Text
		chatID := tu.ID(update.Message.Chat.ID)

		// –ò—â–µ–º –∫–∞–±–∏–Ω–µ—Ç –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
		for _, room := range rooms {
			if room.Name == text {
				// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–∫—Ä—ã—Ç–∏–∏
				_, _ = bot.SendMessage(tu.Message(
					chatID,
					fmt.Sprintf("üîì %s –æ—Ç–∫—Ä—ã—Ç!", room.Name),
				).WithReplyMarkup(keyboard))

				// –ü—É–±–ª–∏–∫—É–µ–º MQTT —Å–æ–æ–±—â–µ–Ω–∏–µ
				if err := publishMQTTMessage(room.Topic, room.Message); err != nil {
					_, _ = bot.SendMessage(tu.Message(
						chatID,
						fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ %s: %v", room.Name, err),
					))
					return
				}

				fmt.Printf("%s opened\n", room.Name)
				return
			}
		}

		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü–æ–º–æ—â—å"
		if text == "–û –±–æ—Ç–µ" {
			_, _ = bot.SendMessage(tu.Message(
				chatID,
				"‚ÑπÔ∏è –≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–æ–π –∫–æ–Ω—Ç—Ä–æ–ª—è –¥–æ—Å—Ç—É–ø–∞.\n\n"+
					"‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –∏–∑ —Å–ø–∏—Å–∫–∞\n"+
					"‚Ä¢ –ë–æ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç –∫–æ–º–∞–Ω–¥—É –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏–µ –¥–≤–µ—Ä–∏\n\n"+
					"–°–æ–∑–¥–∞–Ω–æ –Ω–∞ —è–∑—ã–∫–µ Go —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫ 'TeleGO' –∏ 'Paho-MQTT'.",
			).WithReplyMarkup(keyboard))
		}
	}, th.AnyMessage())

	// –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
	bh.Start()
}
